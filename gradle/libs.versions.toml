[versions]
kotlin = "1.9.10"
kotter = "1.1.1"
ktor = "2.3.4"
pedestal = "2.0.0"
prepared = "0.2.2"
kotest = "5.7.2"
kotlinx-coroutines = "1.7.3"
kotlinx-serialization = "1.6.0"

[plugins]
kotlin = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotest = { id = "io.kotest.multiplatform", version.ref = "kotest" }

[libraries]
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotter = { module = "com.varabyte.kotter:kotter", version.ref = "kotter" }
pedestal-state = { module = "dev.opensavvy.pedestal:state", version.ref = "pedestal" }
pedestal-state-arrow = { module = "dev.opensavvy.pedestal:state-arrow", version.ref = "pedestal" }
pedestal-backbone = { module = "dev.opensavvy.pedestal:backbone", version.ref = "pedestal" }
prepared-suite = { module = "dev.opensavvy.prepared:suite", version.ref = "prepared" }
prepared-kotest = { module = "dev.opensavvy.prepared:runner-kotest", version.ref = "prepared" }
kotest-assertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-engine = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-contentNegotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-testHost = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinxJson = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

# To use existing plugins in convention plugins, we must also declare them as libraries
gradle-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
gradle-nexusPublish = { module = "io.github.gradle-nexus:publish-plugin", version = "1.3.0" }
